import express from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import User from "../models/User.js";

const router = express.Router();

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π UUID –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const STATIC_UUID = "2816cde7-aa2f-4811-be62-54caad866811";

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî —É–±–∏—Ä–∞–µ–º uuid, —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –Ω–µ–≥–æ
router.post("/register", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å" });
    }

    const existing = await User.findOne({ email });
    if (existing) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    const hashed = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ uuid
    const user = await User.create({ email, password: hashed });

    return res.json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", userId: user._id });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –õ–æ–≥–∏–Ω ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    return res.json({ token });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π UUID –≤—Å–µ–≥–¥–∞
router.get("/config", (req, res) => {
  try {
    const auth = req.headers.authorization;
    if (!auth) return res.status(401).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });

    jwt.verify(auth.split(" ")[1], process.env.JWT_SECRET);

    const config = `vless://${STATIC_UUID}@64.176.203.195:443?encryption=none&security=reality&sni=www.cloudflare.com&fp=chrome&pbk=f4ctwiEjeK7rFdvQx74J_zrTyPxIwtvGVl6BrdceFRE&type=tcp#MyVPN`;

    return res.json({ config });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞:", err);
    return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
  }
});

export default router;